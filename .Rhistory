select(genus_species, O) %>%
left_join(N, by = "genus_species") %>%
mutate(MIRI = O * N) %>%
arrange(desc(MIRI))
lionfish %>%
mutate(total_stomachs = length(unique(id))) %>%
group_by(genus_species, id, total_stomachs) %>%
summarize(n()) %>%
group_by(genus_species, total_stomachs) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(O = n  / total_stomachs * 100) %>%
select(genus_species, O) %>%
left_join(N, by = "genus_species") %>%
mutate(MIRI = O * N) %>%
arrange(desc(M))
lionfish %>%
mutate(total_stomachs = length(unique(id))) %>%
group_by(genus_species, id, total_stomachs) %>%
summarize(n()) %>%
group_by(genus_species, total_stomachs) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(O = n  / total_stomachs * 100) %>%
select(genus_species, O) %>%
left_join(N, by = "genus_species") %>%
mutate(MIRI = O * N) %>%
arrange(desc(MIRI))
lionfish %>%
mutate(total_stomachs = length(unique(id))) %>%
group_by(genus_species, id, total_stomachs) %>%
summarize(n()) %>%
group_by(genus_species, total_stomachs) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(O = n  / total_stomachs * 100) %>%
select(genus_species, O) %>%
left_join(N, by = "genus_species") %>%
mutate(MIRI = O * N) %>%
arrange(desc(MIRI)) %>%
mutate(rMIRI = MIRI / sum(MIRI) * 100)
n <- 5
c(n, 1:n)
c(n, 1:n-1)
c(n, 1:(n-1))
c(1:(n-1), n)
c(2:n, 1)
r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2
r = 1K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2
r = 1; K = 100; N0 = 10; nsteps = 50; c = 0.;: p = 10; n = 5; m = 0.2
r = 1; K = 100; N0 = 10; nsteps = 50; c = 0.5; p = 10; n = 5; m = 0.2
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer])
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c * N[t,] + N_in - N_out
}
# End for loop
plot(N)
dim(N)
matplot(N)
View(N)
c = 0
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer])
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c * N[t,] + N_in - N_out
}
matplot(N)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c * N[t,] + N_in - N_out
}
matplot(N)
data.frame(time, N)
data.frame(time, N) %>%
gather(parcel, N, -time)
data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C)
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C)
return(simul)
}
logistic_model(r = 1, c = 0.2, N0 = 10) %>%
ggplot(mapping = aes(x = time, y = N)) +
geom_line() +
geom_point(color = "steelblue", size = 2) +
theme_bw()
rm(list = ls())
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C)
return(simul)
}
c = 0.5
c(c, c, 0, c, c)
c_mpa <- c(c, c, 0, c, c)
c_mpa
image(c_mpa)
image(as.matrix(c_mpa))
c_mpa <- c(c, c, 0, c, c)
rm(list = ls())
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c_mpa * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C)
return(simul)
}
logistic_model(r = 1, c = 0.2, N0 = 10) %>%
ggplot(mapping = aes(x = time, y = N)) +
geom_line() +
geom_point(color = "steelblue", size = 2) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c_mpa * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C)
return(N)
}
logistic_model(r = 1, c = 0.2, N0 = 10) %>% matplot()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c_mpa * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
mutate(C = c * N,
R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model(r = 1, c = 0.2, N0 = 10) %>%
ggplot(mapping = aes(x = time, y = N, color = class)) +
geom_line() +
geom_point(color = "steelblue", size = 2) +
theme_bw()
logistic_model(r = 1, c = 0.2, N0 = 10) %>%
ggplot(mapping = aes(x = time, y = N, color = class)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c_mpa * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N, c_mpa) %>%
gather(parcel, N, -c(time, c_mpa)) %>%
mutate(C = c_mpa * N,
R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - c_mpa * N[t,] + N_in - N_out
}
# End for loop
# Create data.frame with simulation results
simul <- data.frame(time, N, c_mpa) %>%
gather(parcel, N, -c(time, c_mpa)) %>% View()
mutate(C = c_mpa * N,
R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
C <- N
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
C[t, ] <- c_mpa * N[t, ]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - C[t,] + N_in - N_out
}
# End for loop
catch_df <- data.frame(time, C) %>%
gather(parcel, N, -time)
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
left_join(catch_df, by = c("time", "parcel")) %>%
mutate(R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
C <- N
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, c, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
C[t, ] <- c_mpa * N[t, ]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - C[t,] + N_in - N_out
}
# End for loop
catch_df <- data.frame(time, C) %>%
gather(parcel, C, -time)
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
left_join(catch_df, by = c("time", "parcel")) %>%
mutate(R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line() +
geom_point(size = 2) +
theme_bw()
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point() +
theme_bw()
logistic_model() %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point(alpha = 0.5) +
theme_bw()
logistic_model(m = 0.1) %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point(alpha = 0.5) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
C <- N
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, 0, 0, c, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
C[t, ] <- c_mpa * N[t, ]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - C[t,] + N_in - N_out
}
# End for loop
# Create a catch dataframe
catch_df <- data.frame(time, C) %>%
gather(parcel, C, -time)
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
left_join(catch_df, by = c("time", "parcel")) %>%
mutate(R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model(m = 0.1) %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point(alpha = 0.5) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
C <- N
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, 0, 0, 0, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
C[t, ] <- c_mpa * N[t, ]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - C[t,] + N_in - N_out
}
# End for loop
# Create a catch dataframe
catch_df <- data.frame(time, C) %>%
gather(parcel, C, -time)
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
left_join(catch_df, by = c("time", "parcel")) %>%
mutate(R = p * C,
class = ifelse(parcel == "X3", "reserve", "fishng"))
return(simul)
}
logistic_model(m = 0.1) %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point(alpha = 0.5) +
theme_bw()
logistic_model <- function(r = 1, K = 100, N0 = 10, nsteps = 50, c = 0.5, p = 10, n = 5, m = 0.2){
# Define vector of time, N, and C
time <- c(0:nsteps)
# N <- numeric(length = length(time))
N <- matrix(0, ncol = n, nrow = length(time))
C <- N
# Assign initial population size
N[1,] <- N0
# Create pointers
left_pointer <- c(n, 1:(n-1))
right_pointer <- c(2:n, 1)
c_mpa <- c(c, 0, 0, 0, c)
# Start for loop to simulate population
for (t in 1:nsteps) {
N_in <- m * (N[t, left_pointer] + N[t, right_pointer]) / 2
N_out <- m * N[t,]
C[t, ] <- c_mpa * N[t, ]
N[t+1,] <- N[t,] + (r * N[t,] * (1 - (N[t,] / K))) - C[t,] + N_in - N_out
}
# End for loop
# Create a catch dataframe
catch_df <- data.frame(time, C) %>%
gather(parcel, C, -time)
# Create data.frame with simulation results
simul <- data.frame(time, N) %>%
gather(parcel, N, -time) %>%
left_join(catch_df, by = c("time", "parcel")) %>%
mutate(R = p * C,
class = ifelse(parcel %in% c("X3", "X2", "X4"), "reserve", "fishng"))
return(simul)
}
logistic_model(m = 0.1) %>%
ggplot(mapping = aes(x = time, y = N, color = class, group = parcel, size = C)) +
geom_line(size = 1) +
geom_point(alpha = 0.5) +
theme_bw()
